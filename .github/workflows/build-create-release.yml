---
name: build_create_release
# yamllint disable rule:line-length

on:
  workflow_dispatch:
    inputs:
      draft:
        description: 'Create a draft release'
        required: true
        type: boolean
        default: true

# set the run-name 
run-name: ${{ github.ref_name }} ->build_create_release (
  ${{ github.run_attempt }}
  )
    
permissions: {}

# Define common environment variables for all jobs
env:
  PLUGIN_NAME: PerplexitySearchShortcut
  DOTNET_VERSION: 9.0.x
  DOTNET_FRAMEWORK: net9.0-windows10.0.22621.0
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true

jobs:

  validate:
    name: Validates inputs
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      version: ${{ steps.get_version.outputs.version }}
  
    steps:
      - name: Echo current date and time
        id: datetime
        run: |
          echo "datetime: $(date '+%Y-%m-%d %H:%M:%S')"

      - name: Checkout
        uses: actions/checkout@v4
    
      - name: Get version
        id: get_version
        # let's get the version from plugin.json
        run: |
          version=$(jq -r '.Version' plugin.json)
          echo "version is $version"
          echo "version=$version" >> $GITHUB_OUTPUT
      
      #validates that the version is a valid semver
      - name: Validate version
        id: validate_version
        run: |
          if [[ ! ${{ steps.get_version.outputs.version }} =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Invalid version: ${{ steps.get_version.outputs.version }}"
            exit 1
          fi


  build:
    name: Build
    needs: validate
    strategy:
      matrix:
        architecture: [x64, ARM64]
    permissions:
      contents: write
   
    runs-on: windows-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4


      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Build
        run: dotnet build PowerToys-Run-${{ env.PLUGIN_NAME }}.sln --configuration Release /p:Platform=${{matrix.architecture}} /p:EnableWindowsTargeting=true

      - name: Install WiX Toolset
        run: dotnet tool install -g WiX

      - name: Create release assets
        shell: pwsh
        run: |
          .\build\CreateReleaseAssets.ps1 -architecture ${{ matrix.architecture }} -Version ${{needs.validate.outputs.version}}
  
      - name: List the output files
        run: ls -R 
        working-directory: dist/

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PLUGIN_NAME }}-${{ needs.validate.outputs.version }}-${{matrix.architecture}}
          path: dist/


    
  create_release:
    name: create_release
    runs-on: ubuntu-latest
    needs: [build, validate]
    permissions:
      id-token: write
      contents: write
    steps:

    - name: Checkout
      uses: actions/checkout@v4

      # note: this will download all artifacts to a directory for each artifact
      # https://github.com/actions/download-artifact/tree/v2.1.1/#download-all-artifacts
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        path: dist/
        
    - name: Display structure of downloaded files
      run: ls -R
      working-directory: dist/
    

    - name: Create release through github cli and upload assets
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        gh release create ${{ needs.validate.outputs.version }} --title ${{ needs.validate.outputs.version }} --generate-notes \
          ${{ inputs.draft  && '--draft' || '' }} \
          'dist/${{ env.PLUGIN_NAME }}-${{ needs.validate.outputs.version }}-x64/${{ env.PLUGIN_NAME }}-${{ needs.validate.outputs.version }}-x64.zip' \
          'dist/${{ env.PLUGIN_NAME }}-${{ needs.validate.outputs.version }}-x64/${{ env.PLUGIN_NAME }}-${{ needs.validate.outputs.version }}-x64.msi' \
          'dist/${{ env.PLUGIN_NAME }}-${{ needs.validate.outputs.version }}-x64/winget/manifests/${{ env.PLUGIN_NAME }}-manifests-${{ needs.validate.outputs.version }}-x64.zip' 
          

    - name: Create release branch
      run: |
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        git checkout -b "release/v${{ needs.validate.outputs.version }}"
        git push origin "release/v${{ needs.validate.outputs.version }}"
